{"version":3,"sources":["components/Scroller/index.js","components/Intro/index.js","components/About/index.js","App.js","serviceWorker.js","index.js"],"names":["Scroller","react_default","a","createElement","this","props","children","Component","Intro","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","showName","showSkills","skillClass","_this2","setTimeout","setState","className","lib_default","show","Typist_default","avgTypingDelay","style","marginRight","Delay","ms","Backspace","count","delay","About","App","components_Scroller","components_Intro","components_About","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PAceA,mLATX,OACEC,EAAAC,EAAAC,cAAA,WACGC,KAAKC,MAAMC,iBAJGC,6CC+HRC,2BArHb,SAAAA,EAAYH,GAAO,IAAAI,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAN,KAAAI,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAN,KAAAM,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAV,KAAMC,KACDU,MAAQ,CACXC,UAAU,EACVC,YAAY,EACZC,WAAY,4BALGT,mFASC,IAAAU,EAAAf,KAClBgB,WAAW,WAETD,EAAKE,SAAS,CAACL,UAAU,IACzBI,WAAW,WACTD,EAAKE,SAAS,CAACJ,YAAY,IAC3BE,EAAKE,SAAS,CAACH,WAAY,cAC1B,MAGF,sCAMH,OACEjB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,mBAEbrB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,iBACbrB,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,CAAiBoB,UAAU,aAAaE,KAAMpB,KAAKW,MAAMC,UAAzD,qBAIAf,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,CAAiBoB,UAAU,eAAeE,KAAMpB,KAAKW,MAAME,YAA3D,wBAICb,KAAKW,MAAME,YACVhB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,YACbrB,EAAAC,EAAAC,cAACsB,EAAAvB,EAAD,CAAQwB,eAAgB,KAEtBzB,EAAAC,EAAAC,cAAA,QAAMwB,MAAO,CAACC,YAAa,QAA3B,kBAIA3B,EAAAC,EAAAC,cAAA,oBAGAF,EAAAC,EAAAC,cAACsB,EAAAvB,EAAO2B,MAAR,CAAcC,GAAI,MAClB7B,EAAAC,EAAAC,cAACsB,EAAAvB,EAAO6B,UAAR,CAAkBC,MAAO,EAAGC,MAAO,MAEnChC,EAAAC,EAAAC,cAAA,qBAGAF,EAAAC,EAAAC,cAACsB,EAAAvB,EAAO2B,MAAR,CAAcC,GAAI,MAClB7B,EAAAC,EAAAC,cAACsB,EAAAvB,EAAO6B,UAAR,CAAkBC,MAAO,EAAGC,MAAO,MAEnChC,EAAAC,EAAAC,cAAA,mBAGAF,EAAAC,EAAAC,cAACsB,EAAAvB,EAAO2B,MAAR,CAAcC,GAAI,MAClB7B,EAAAC,EAAAC,cAACsB,EAAAvB,EAAO6B,UAAR,CAAkBC,MAAO,EAAGC,MAAO,MAEnChC,EAAAC,EAAAC,cAAA,oBAGAF,EAAAC,EAAAC,cAACsB,EAAAvB,EAAO2B,MAAR,CAAcC,GAAI,MAClB7B,EAAAC,EAAAC,cAACsB,EAAAvB,EAAO6B,UAAR,CAAkBC,MAAO,EAAGC,MAAO,MAEnChC,EAAAC,EAAAC,cAAA,sBAGAF,EAAAC,EAAAC,cAACsB,EAAAvB,EAAO2B,MAAR,CAAcC,GAAI,MAClB7B,EAAAC,EAAAC,cAACsB,EAAAvB,EAAO6B,UAAR,CAAkBC,MAAO,EAAGC,MAAO,MAEnChC,EAAAC,EAAAC,cAAA,kBAGAF,EAAAC,EAAAC,cAACsB,EAAAvB,EAAO2B,MAAR,CAAcC,GAAI,MAClB7B,EAAAC,EAAAC,cAACsB,EAAAvB,EAAO6B,UAAR,CAAkBC,MAAO,EAAGC,MAAO,MAEnChC,EAAAC,EAAAC,cAAA,iBAGAF,EAAAC,EAAAC,cAACsB,EAAAvB,EAAO2B,MAAR,CAAcC,GAAI,MAClB7B,EAAAC,EAAAC,cAACsB,EAAAvB,EAAO6B,UAAR,CAAkBC,MAAO,EAAGC,MAAO,MAEnChC,EAAAC,EAAAC,cAAA,mBAGAF,EAAAC,EAAAC,cAACsB,EAAAvB,EAAO2B,MAAR,CAAcC,GAAI,MAClB7B,EAAAC,EAAAC,cAACsB,EAAAvB,EAAO6B,UAAR,CAAkBC,MAAO,EAAGC,MAAO,MAEnChC,EAAAC,EAAAC,cAAA,sBAGAF,EAAAC,EAAAC,cAACsB,EAAAvB,EAAO2B,MAAR,CAAcC,GAAI,MAClB7B,EAAAC,EAAAC,cAACsB,EAAAvB,EAAO6B,UAAR,CAAkBC,MAAO,EAAGC,MAAO,MAEnChC,EAAAC,EAAAC,cAAA,qCArGII,cCEL2B,mLARX,OACEjC,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,2BAJDf,aCeL4B,MAXf,WACE,OACElC,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,OACbrB,EAAAC,EAAAC,cAACiC,EAAD,KACEnC,EAAAC,EAAAC,cAACkC,EAAD,MACApC,EAAAC,EAAAC,cAACmC,EAAD,SCCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e2b534e5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass Scroller extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Scroller;","import React, { Component } from 'react';\r\n\r\nimport ReactRevealText from 'react-reveal-text';\r\nimport Typist from 'react-typist';\r\n\r\nimport 'react-typist/dist/Typist.css';\r\n\r\nimport './home.scss';\r\n\r\n\r\n\r\nclass Intro extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showName: false,\r\n      showSkills: false,\r\n      skillClass: \"langauge-fadein language\"\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    setTimeout(() => {\r\n\r\n      this.setState({showName: true});\r\n      setTimeout(() => {\r\n        this.setState({showSkills: true});\r\n        this.setState({skillClass: \"language\"});\r\n      }, 2000);\r\n\r\n\r\n    }, 1000);\r\n\r\n  }\r\n  render() {\r\n\r\n\r\n    return (\r\n      <div className=\"intro-container\">\r\n\r\n        <div className=\"fh col around\">\r\n          <ReactRevealText className=\"name-intro\" show={this.state.showName}>\r\n            Isitha Subasinghe\r\n          </ReactRevealText>\r\n\r\n          <ReactRevealText className=\"skills-intro\" show={this.state.showSkills}>\r\n            Full stack developer\r\n          </ReactRevealText>\r\n\r\n          {this.state.showSkills &&\r\n            <div className=\"language\">\r\n              <Typist avgTypingDelay={150}>\r\n\r\n                <span style={{marginRight: '2vw'}}>\r\n                  Experienced in \r\n                </span>\r\n\r\n                <span >\r\n                  Java\r\n                </span>\r\n                <Typist.Delay ms={500} />\r\n                <Typist.Backspace count={4} delay={200} />\r\n\r\n                <span>\r\n                  React\r\n                </span>\r\n                <Typist.Delay ms={500} />\r\n                <Typist.Backspace count={5} delay={200} />\r\n\r\n                <span>\r\n                  AWS\r\n                </span>\r\n                <Typist.Delay ms={500} />\r\n                <Typist.Backspace count={3} delay={200} />\r\n\r\n                <span>\r\n                  Node\r\n                </span>\r\n                <Typist.Delay ms={500} />\r\n                <Typist.Backspace count={4} delay={200} />\r\n\r\n                <span>\r\n                  Python\r\n                </span>\r\n                <Typist.Delay ms={500} />\r\n                <Typist.Backspace count={6} delay={200} />\r\n\r\n                <span>\r\n                  Go\r\n                </span>\r\n                <Typist.Delay ms={500} />\r\n                <Typist.Backspace count={2} delay={200} />\r\n\r\n                <span>\r\n                  C\r\n                </span>\r\n                <Typist.Delay ms={500} />\r\n                <Typist.Backspace count={1} delay={200} />\r\n\r\n                <span>\r\n                  C++\r\n                </span>\r\n                <Typist.Delay ms={500} />\r\n                <Typist.Backspace count={3} delay={200} />\r\n\r\n                <span>\r\n                  Docker\r\n                </span>\r\n                <Typist.Delay ms={500} />\r\n                <Typist.Backspace count={6} delay={200} />\r\n\r\n                <span>\r\n                  Kubernetes\r\n                </span>\r\n                \r\n              </Typist>\r\n\r\n            </div>\r\n          }\r\n          \r\n \r\n\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Intro;","import React, { Component } from 'react';\r\n\r\nclass About extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"about-container\">\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default About;","import React from 'react';\n\nimport Scroller from './components/Scroller'\nimport Intro from './components/Intro';\nimport About from './components/About';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Scroller>\n        <Intro />\n        <About />\n      </Scroller>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}